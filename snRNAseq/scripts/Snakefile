import os
configfile: "config.json"

pipseeker_path = "/research/labs/neurology/fryer/m239830/tools/pipseeker-v3.2.0-linux/pipseeker"

rule all:
        input:
                expand(config["pipseeker_dir"]+"{sample}/", sample = config["sample_names"]),
                expand(config["cellbender_dir"]+"{sample}/", sample = config["sample_names"])

#------------------------------
# alignment
#------------------------------
rule pipseeker_full:
        output:
                counts = (directory(config["pipseeker_dir"]+"{sample}/")),
                h5 = (config["pipseeker_dir"]+"{sample}/raw_feature_bc_matrix.h5"),
        params:
                pipseeker = pipseeker_path, 
                id = lambda wildcards: config[wildcards.sample]["fq_path"] + config[wildcards.sample]["fq"],
                ref = (config["Sus.scrofa"])
        shell:
                """
                {params.pipseeker} full --chemistry v4 --fastq {params.id} --star-index-path {params.ref} --output-path {output.counts}
                """
                
# $sample is the sampleID (e.g. sample1)
# --full 
# --fastqs is path to the snRNAseq/scRNAseq fastq files
# --star-index-path is the path to the human genome directory. This was created in a prior step.
# --output-path folder to save the outputs

# Pipseeker example tutorial: https://www.fluentbio.com/wp-content/uploads/2023/03/Getting-Started-with-PIPseeker.pdf 

#------------------------------
# remove ambient cells
#------------------------------
rule cellbender:
        input:
            rules.pipseeker_full.output.h5
        output:
            dir = (config["cellbender_dir"]+"{sample}/"),
            filtered = (config["cellbender_dir"]+"{sample}_cellbender.h5")
        params:
            id = lambda wildcards: config[wildcards.sample]["ID"],
        shell:
            """                                                                                         
            mkdir {output.dir};                                                                    
            sh nucleus_cellbender.sh {params.id} || true;
            """

# https://cellbender.readthedocs.io/en/latest/usage/index.html            
# --cuda: flag if using GPU
# --expected-cells: Base this on either the number of cells expected a priori from the experimental design, or if this is not known, base th is number on the UMI curve as shown below, where the appropriate number would be 5000. Pick a number where you are reasonably sure that alldroplets to the left on the UMI curve are real cells.
# --total-droplets-included: Choose a number that goes a few thousand barcodes into the ?~@~\empty droplet plateau?~@~]. Include some droplets that you think are surely empty. But be aware that the larger this number, the longer the algorithm takes to run (linear). See the UMI curve below, where an appropriate choice would be 15,000. Every droplet to the right of this number on the UMI curve should be surely-empty. (
# This kind of UMI curve can be seen in the web_summary.html output from cellranger count.)
# --fpr: A value of 0.01 is generally quite good, but you can generate a few output count matrices and compare them by choosing a few values: 0.01 0.05 0.1
# --epochs: 150 is typically a good choice. Look for a reasonably-converged ELBO value in the output PDF learning curve (meaning it looks like it has reached some saturating value). Though it may be tempting to train for more epochs, it is not advisable to over-train, since thisincreases the likelihood of over-fitting. (We regularize to prevent over-fitting, but training for more than 300 epochs is too much.)
# NOTE: total_droplets must be an integer greater than the input expected_cell_count, which is 10000.
